{"version":3,"sources":["task3.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","promise","Promise","resolved","reject","setTimeout","canProcess","win","id","time","logSuccess","console","log","logError","warn","amount","then","catch"],"mappings":";AAGA,MAAMA,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAEhDK,EAAmBC,IACjBC,MAAAA,EAAQR,EAA0B,IAAK,KAgBtCS,OAfS,IAAIC,QAAQ,CAACC,EAAUC,KACrCC,WAAW,KAGLC,GAFaX,KAAKE,SAAW,GAEjB,CACVU,IAAAA,EAAM,CACRC,GAAIT,EAAYS,GAChBC,KAAMT,GAERG,EAASI,QAEXH,EAAOL,EAAYS,KAEpBR,MAICU,EAAa,EAAEF,GAAAA,EAAIC,KAAAA,MACvBE,QAAQC,mBAAmBJ,kBAAmBC,QAG1CI,EAAWL,IACfG,QAAQG,qCAAqCN,+BAG/CV,EAAgB,CAAEU,GAAI,GAAIO,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ,GAETf,EAAgB,CAAEU,GAAI,GAAIO,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ,GAETf,EAAgB,CAAEU,GAAI,GAAIO,OAAQ,KAC/BC,KAAKN,GACLO,MAAMJ,GAETf,EAAgB,CAAEU,GAAI,GAAIO,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ","file":"task3.7b6fd4ce.js","sourceRoot":"../src","sourcesContent":["// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции\n// onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\nconst makeTransaction = (transaction) => {\n  const delay = randomIntegerFromInterval(200, 500);\n  const promise = new Promise((resolved, reject) => { \n    setTimeout(() => {\n    const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        let win = {\n          id: transaction.id,\n          time: delay\n        };\n        resolved(win);\n    } else {\n      reject(transaction.id);\n    }\n  }, delay);\n  }); \n  return promise\n};\nconst logSuccess = ({id, time}) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);"]}